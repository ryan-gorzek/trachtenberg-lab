scale_fill_brewer(palette = "Set1") +
scale_color_brewer(palette = "Set1") +
labs(
x = "Closest Gene (bp)",
y = "Percentage",
fill = "Sample",
color = "Sample"
) +
theme_minimal()
print(p)
library(ggplot2)
library(dplyr)
# Load the files and add a 'sample' column
files <- list(
# "E:/bams/opossum/dists_3A.bed" = "3A",
# "E:/bams/opossum/dists_3B.bed" = "3B",
"E:/bams/opossum/dists_4A.bed" = "4A"
# "E:/bams/opossum/dists_4B.bed" = "4B"
# "E:/_genomes/Mouse/dists_mouse.bed" = "MS"
)
# Read and combine all files
closest.bed <- bind_rows(lapply(names(files), function(path) {
df <- read.table(path, sep = "\t", header = FALSE)
df$sample <- files[[path]]
return(df)
}))
# Plot
p <- ggplot(closest.bed, aes(x = V13, fill = sample, color = sample)) +
geom_histogram(
binwidth = 1000,
boundary = 0,
aes(y = ..count.. / tapply(..count.., ..PANEL.., sum)[..PANEL..] * 100),
alpha = 0.4,
position = "identity"
) +
scale_x_continuous(
limits = c(-50000, 50000),
oob = scales::squish
) +
scale_fill_brewer(palette = "Set1") +
scale_color_brewer(palette = "Set1") +
labs(
x = "Closest Gene (bp)",
y = "Percentage",
fill = "Sample",
color = "Sample"
) +
theme_minimal()
print(p)
# Plot
p <- ggplot(closest.bed, aes(x = V13, fill = sample, color = sample)) +
geom_histogram(
binwidth = 1000,
boundary = 0,
aes(y = ..count.. / tapply(..count.., ..PANEL.., sum)[..PANEL..] * 100),
alpha = 0.4,
position = "identity"
) +
scale_x_continuous(
limits = c(-50000, 50000),
oob = scales::squish
) +
scale_fill_brewer(palette = "Set1") +
scale_color_brewer(palette = "Set1") +
labs(
x = "Closest Gene (bp)",
y = "Percentage",
fill = "Sample",
color = "Sample"
) +
theme_minimal() + ylim(0, 30)
print(p)
# Plot
p <- ggplot(closest.bed, aes(x = V13, fill = sample, color = sample)) +
geom_histogram(
binwidth = 1000,
boundary = 0,
aes(y = ..count.. / tapply(..count.., ..PANEL.., sum)[..PANEL..] * 100),
alpha = 0.4,
position = "identity"
) +
scale_x_continuous(
limits = c(-50000, 50000),
oob = scales::squish
) +
scale_fill_brewer(palette = "Set1") +
scale_color_brewer(palette = "Set1") +
labs(
x = "Closest Gene (bp)",
y = "Percentage",
fill = "Sample",
color = "Sample"
) +
theme_minimal() + ylim(0, 35)
print(p)
ggsave("E:/Opossum_Paper/Figure S1/Intergenic_Reads_Dist_Opossum.svg", plot = p, width = 6, height = 5)
library(ggplot2)
library(dplyr)
# Load the files and add a 'sample' column
files <- list(
# "E:/bams/opossum/dists_3A.bed" = "3A",
# "E:/bams/opossum/dists_3B.bed" = "3B",
# "E:/bams/opossum/dists_4A.bed" = "4A"
# "E:/bams/opossum/dists_4B.bed" = "4B"
"E:/_genomes/Mouse/dists_mouse.bed" = "MS"
)
# Read and combine all files
closest.bed <- bind_rows(lapply(names(files), function(path) {
df <- read.table(path, sep = "\t", header = FALSE)
df$sample <- files[[path]]
return(df)
}))
# Plot
p <- ggplot(closest.bed, aes(x = V13, fill = sample, color = sample)) +
geom_histogram(
binwidth = 1000,
boundary = 0,
aes(y = ..count.. / tapply(..count.., ..PANEL.., sum)[..PANEL..] * 100),
alpha = 0.4,
position = "identity"
) +
scale_x_continuous(
limits = c(-50000, 50000),
oob = scales::squish
) +
scale_fill_brewer(palette = "Set1") +
scale_color_brewer(palette = "Set1") +
labs(
x = "Closest Gene (bp)",
y = "Percentage",
fill = "Sample",
color = "Sample"
) +
theme_minimal() + ylim(0, 35)
print(p)
# Plot
p <- ggplot(closest.bed, aes(x = V13, fill = sample, color = sample)) +
geom_histogram(
binwidth = 1000,
boundary = 0,
aes(y = ..count.. / tapply(..count.., ..PANEL.., sum)[..PANEL..] * 100),
alpha = 0.4,
position = "identity"
) +
scale_x_continuous(
limits = c(-50000, 50000),
oob = scales::squish
) +
# scale_fill_brewer(palette = "Set1") +
# scale_color_brewer(palette = "Set1") +
labs(
x = "Closest Gene (bp)",
y = "Percentage",
fill = "Sample",
color = "Sample"
) +
theme_minimal() + ylim(0, 35)
print(p)
# Plot
p <- ggplot(closest.bed, aes(x = V13, fill = sample, color = sample)) +
geom_histogram(
binwidth = 1000,
boundary = 0,
aes(y = ..count.. / tapply(..count.., ..PANEL.., sum)[..PANEL..] * 100),
alpha = 1,
position = "identity"
) +
scale_x_continuous(
limits = c(-50000, 50000),
oob = scales::squish
) +
# scale_fill_brewer(palette = "Set1") +
# scale_color_brewer(palette = "Set1") +
labs(
x = "Closest Gene (bp)",
y = "Percentage",
fill = "Sample",
color = "Sample"
) +
theme_minimal() + ylim(0, 35)
print(p)
ggsave("E:/Opossum_Paper/Figure S1/Intergenic_Reads_Dist_Mouse.svg", plot = p, width = 6, height = 5)
p <- ggplot(closest.bed, aes(x = V13, fill = sample, color = sample)) +
geom_histogram(
binwidth = 1000,
boundary = 0,
aes(y = ..count.. / sum(..count..) * 100),  # per-facet percentage
fill = "lightblue",
color = "black"
) +
scale_x_continuous(
limits = c(-10000, 10000),
oob = scales::squish
) +
scale_y_continuous(
limits = c(0, 10),
oob = scales::squish
) +
labs(
x = "Closest Gene (bp)",
y = "Percentage"
) +
facet_wrap(~ sample, ncol = 2) +  # 2x2 layout
theme_minimal()
print(p)
ggsave("E:/Opossum_Paper/Figure S1/Intergenic_Reads_Dist_MS_Zoom.svg", plot = p, width = 5, height = 5)
# Plot
p <- ggplot(closest.bed, aes(x = V13, fill = sample, color = sample)) +
geom_histogram(
binwidth = 1000,
boundary = 0,
aes(y = ..count.. / tapply(..count.., ..PANEL.., sum)[..PANEL..] * 100),
fill = "lightblue",
alpha = 1,
position = "identity"
) +
scale_x_continuous(
limits = c(-50000, 50000),
oob = scales::squish
) +
# scale_fill_brewer(palette = "Set1") +
# scale_color_brewer(palette = "Set1") +
labs(
x = "Closest Gene (bp)",
y = "Percentage",
fill = "Sample",
color = "Sample"
) +
theme_minimal() + ylim(0, 35)
print(p)
# Plot
p <- ggplot(closest.bed, aes(x = V13, fill = sample, color = sample)) +
geom_histogram(
binwidth = 1000,
boundary = 0,
aes(y = ..count.. / tapply(..count.., ..PANEL.., sum)[..PANEL..] * 100),
fill = "lightblue",
color = "black",
alpha = 1,
position = "identity"
) +
scale_x_continuous(
limits = c(-50000, 50000),
oob = scales::squish
) +
# scale_fill_brewer(palette = "Set1") +
# scale_color_brewer(palette = "Set1") +
labs(
x = "Closest Gene (bp)",
y = "Percentage",
fill = "Sample",
color = "Sample"
) +
theme_minimal() + ylim(0, 35)
print(p)
ggsave("E:/Opossum_Paper/Figure S1/Intergenic_Reads_Dist_Mouse.svg", plot = p, width = 6, height = 5)
ggsave("E:/Opossum_Paper/Figure S1/Intergenic_Reads_Dist_Mouse.svg", plot = p, width = 6, height = 5)
ggsave("E:/Opossum_Paper/Figure S1/Intergenic_Reads_Dist_Mouse.svg", plot = p, width = 5, height = 5)
gc()
library(ggplot2)
library(dplyr)
# Load the files and add a 'sample' column
files <- list(
# "E:/bams/opossum/dists_3A.bed" = "3A",
# "E:/bams/opossum/dists_3B.bed" = "3B",
"E:/bams/opossum/dists_4A.bed" = "4A"
# "E:/bams/opossum/dists_4B.bed" = "4B"
# "E:/_genomes/Mouse/dists_mouse.bed" = "MS"
)
# Read and combine all files
closest.bed <- bind_rows(lapply(names(files), function(path) {
df <- read.table(path, sep = "\t", header = FALSE)
df$sample <- files[[path]]
return(df)
}))
# Plot
p <- ggplot(closest.bed, aes(x = V13, fill = sample, color = sample)) +
geom_histogram(
binwidth = 1000,
boundary = 0,
aes(y = ..count.. / tapply(..count.., ..PANEL.., sum)[..PANEL..] * 100),
fill = "lightblue",
color = "black",
alpha = 1,
position = "identity"
) +
scale_x_continuous(
limits = c(-50000, 50000),
oob = scales::squish
) +
# scale_fill_brewer(palette = "Set1") +
# scale_color_brewer(palette = "Set1") +
labs(
x = "Closest Gene (bp)",
y = "Percentage",
fill = "Sample",
color = "Sample"
) +
theme_minimal() + ylim(0, 35)
print(p)
ggsave("E:/Opossum_Paper/Figure S1/Intergenic_Reads_Dist_Opossum.svg", plot = p, width = 5, height = 5)
p <- ggplot(closest.bed, aes(x = V13, fill = sample, color = sample)) +
geom_histogram(
binwidth = 1000,
boundary = 0,
aes(y = ..count.. / sum(..count..) * 100),  # per-facet percentage
fill = "lightblue",
color = "black"
) +
scale_x_continuous(
limits = c(-10000, 10000),
oob = scales::squish
) +
scale_y_continuous(
limits = c(0, 10),
oob = scales::squish
) +
labs(
x = "Closest Gene (bp)",
y = "Percentage"
) +
facet_wrap(~ sample, ncol = 2) +  # 2x2 layout
theme_minimal()
print(p)
ggsave("E:/Opossum_Paper/Figure S1/Intergenic_Reads_Dist_4A_Zoom.svg", plot = p, width = 5, height = 5)
library(Seurat)
library(SeuratDisk)
library(reticulate)
library(scrubletR)
library(ggplot2)
library(patchwork)
library(dplyr)
library(data.table)
library(clustree)
library(reshape2)
library(tidyr)
library(gridExtra)
library(stringr)
library(plyr)
source("C:/Ryan/GitHub/trachtenberg-lab/transcriptomics/tools/seurat_functions.R")
source("C:/Ryan/GitHub/trachtenberg-lab/transcriptomics/tools/seurat_integration_functions.R")
source("C:/Ryan/GitHub/trachtenberg-lab/transcriptomics/xgboost/xgboost_train.R")
source("C:/Ryan/GitHub/trachtenberg-lab/transcriptomics/xgboost/plottingFxns.R")
colors_list <- GetColors()
data.path <- "E:/STOmics/seurat/Opossum/raw/"
obj.data <- Read10X(data.path, gene.column = 1)
obj.section <- CreateSeuratObject(counts = obj.data, project = "Opossum_V1_Stereo-seq")
mapping_path <- "E:/_genomes/Opossum_Mouse_Genes.txt"
obj.section <- MapGenes(obj.section, mapping_path, use_ids = TRUE)
obj.section$species <- "Opossum"
X <- read.csv(paste(data.path, "x_coords.csv", sep = ""), header = FALSE)
X <- (X - max(X)) * -1
obj.section <- AddMetaData(obj.section, X$V1, "X")
Y <- read.csv(paste(data.path, "y_coords.csv", sep = ""), header = FALSE)
Y <- (Y - max(Y)) * -1
obj.section <- AddMetaData(obj.section, Y$V1, "Y")
cents.df <- data.frame(X, Y)
colnames(cents.df) <- c("X", "Y")
rownames(cents.df) <- colnames(obj.section)
cents <- CreateCentroids(cents.df)
fov <- CreateFOV(
cents,
type = "centroids",
assay = "RNA",
key = Key("FOV", quiet = TRUE)
)
section.cells <- read.csv("E:/STOmics/seurat/Opossum/selected_barcodes_section1.csv", header = FALSE)
fov <- fov[as.character(section.cells$V1)]
obj.section[["FOV"]] <- fov
max(obj.section@images$FOV@boundaries$centroids@coords)
max(obj.section@images$FOV@boundaries$centroids@coords[, 1])
obj.section@images$FOV@boundaries$centroids@coords[, 1]
obj.section@images$FOV@boundaries$centroids@coords
max(obj.section@images$FOV@boundaries$centroids@coords[, 1])
min(obj.section@images$FOV@boundaries$centroids@coords[, 1])
min(obj.section@images$FOV@boundaries$centroids@coords[, 2])
max(obj.section@images$FOV@boundaries$centroids@coords[, 2])
16299 - 7881
8418
8418/2
1000/4209
gc()
library(Seurat)
library(SeuratDisk)
library(reticulate)
library(scrubletR)
library(ggplot2)
library(patchwork)
library(dplyr)
library(data.table)
library(clustree)
library(reshape2)
library(tidyr)
library(gridExtra)
library(stringr)
library(plyr)
source("C:/Ryan/GitHub/trachtenberg-lab/transcriptomics/tools/seurat_functions.R")
source("C:/Ryan/GitHub/trachtenberg-lab/transcriptomics/tools/seurat_integration_functions.R")
source("C:/Ryan/GitHub/trachtenberg-lab/transcriptomics/xgboost/xgboost_train.R")
source("C:/Ryan/GitHub/trachtenberg-lab/transcriptomics/xgboost/plottingFxns.R")
colors_list <- GetColors()
data.path <- "E:/STOmics/seurat/Mouse/raw/"
obj.data <- Read10X(data.path, gene.column = 2)
obj.section <- CreateSeuratObject(counts = obj.data, project = "Mouse_V1_Stereo-seq")
obj.section$species <- "Mouse"
X <- read.csv(paste(data.path, "x_coords.csv", sep = ""), header = FALSE)
X <- (X - max(X)) * -1
obj.section <- AddMetaData(obj.section, X$V1, "X")
Y <- read.csv(paste(data.path, "y_coords.csv", sep = ""), header = FALSE)
Y <- (Y - max(Y)) * -1
obj.section <- AddMetaData(obj.section, Y$V1, "Y")
cents.df <- data.frame(X, Y)
colnames(cents.df) <- c("X", "Y")
rownames(cents.df) <- colnames(obj.section)
cents <- CreateCentroids(cents.df)
fov <- CreateFOV(
cents,
type = "centroids",
assay = "RNA",
key = Key("FOV", quiet = TRUE)
)
section.cells <- read.csv("E:/STOmics/seurat/Mouse/selected_barcodes_section1.csv", header = FALSE)
fov <- fov[as.character(section.cells$V1)]
obj.section[["FOV"]] <- fov
obj.section@images
obj.section@images$FOV@boundaries$centroids[,1]
obj.section@images$FOV@boundaries$centroids@coords[, 1]
min(obj.section@images$FOV@boundaries$centroids@coords[, 2])
max(obj.section@images$FOV@boundaries$centroids@coords[, 2])
18497-9490
9007/2
1000/4503.5
gc()
library(Seurat)
library(SeuratDisk)
library(reticulate)
library(scrubletR)
library(ggplot2)
library(patchwork)
library(dplyr)
library(data.table)
library(clustree)
library(reshape2)
library(tidyr)
library(gridExtra)
library(stringr)
library(plyr)
source("C:/Ryan/GitHub/trachtenberg-lab/transcriptomics/tools/seurat_functions.R")
source("C:/Ryan/GitHub/trachtenberg-lab/transcriptomics/tools/seurat_integration_functions.R")
source("C:/Ryan/GitHub/trachtenberg-lab/transcriptomics/xgboost/xgboost_train.R")
source("C:/Ryan/GitHub/trachtenberg-lab/transcriptomics/xgboost/plottingFxns.R")
colors_list <- GetColors()
data.path <- "E:/STOmics/seurat/Mouse/raw/"
obj.data <- Read10X(data.path, gene.column = 2)
obj.section <- CreateSeuratObject(counts = obj.data, project = "Mouse_V1_Stereo-seq")
obj.section$species <- "Mouse"
X <- read.csv(paste(data.path, "x_coords.csv", sep = ""), header = FALSE)
X <- (X - max(X)) * -1
obj.section <- AddMetaData(obj.section, X$V1, "X")
Y <- read.csv(paste(data.path, "y_coords.csv", sep = ""), header = FALSE)
Y <- (Y - max(Y)) * -1
obj.section <- AddMetaData(obj.section, Y$V1, "Y")
cents.df <- data.frame(X, Y)
colnames(cents.df) <- c("X", "Y")
rownames(cents.df) <- colnames(obj.section)
cents <- CreateCentroids(cents.df)
fov <- CreateFOV(
cents,
type = "centroids",
assay = "RNA",
key = Key("FOV", quiet = TRUE)
)
section.cells <- read.csv("E:/STOmics/seurat/Mouse/selected_barcodes_section2.csv", header = FALSE)
fov <- fov[as.character(section.cells$V1)]
obj.section[["FOV"]] <- fov
ImageDimPlot(obj.section, cols = "red")
ImageFeaturePlot(obj.section, "nCount_RNA", max.cutoff = 1000)
# ImageFeaturePlot(obj, "", max.cutoff = 10, axes = TRUE)
obj.glutamatergic <- readRDS("E:/Transcriptomics_V1/Mouse/seurat/mouse_v1_P38_glutamatergic_processed.rds")
obj.glutamatergic$class <- "glutamatergic"
obj.gabaergic <- readRDS("E:/Transcriptomics_V1/Mouse/seurat/mouse_v1_P38_gabaergic_processed.rds")
obj.gabaergic$class <- "gabaergic"
obj.nonneuronal <- readRDS("E:/Transcriptomics_V1/Mouse/seurat/mouse_v1_P38_nonneuronal_processed.rds")
obj <- merge(obj.glutamatergic, y = c(obj.gabaergic, obj.nonneuronal))
rm(obj.glutamatergic)
rm(obj.gabaergic)
rm(obj.nonneuronal)
cell_mask <- Reduce(intersect, list(WhichCells(obj.section, expression = nFeature_RNA > 50),
WhichCells(obj.section, expression = nCount_RNA > 100)))
gene_mask <- rownames(obj.section)[Matrix::rowSums(obj.section[["RNA"]]@counts > 0) > 8]
obj.section <- subset(obj.section, features = gene_mask, cells = cell_mask)
obj$method <- "snRNA-seq"
obj.section$method <- "Stereo-seq"
df <- setNames(data.frame(matrix(ncol = 2, nrow = 0)), c("cell", "subclass_nn"))
cell.names.sp <- colnames(obj.section)
for (i in 1:ceiling(ncol(obj.section) / 1000)) {
# Sample names unless there's too few remaining
if (length(cell.names.sp) >= ncol(obj)) {
curr.names <- sample(cell.names.sp, 1000) # ncol(obj)
cell.names.sp <- setdiff(cell.names.sp, curr.names)
} else { curr.names <- cell.names.sp }
# Subset object and integrate
obj.section.i <- obj.section[, curr.names]
obj.i <- IntegrateObjects(obj, obj.section.i, resolutions = c(0.5), subsample = FALSE)
# Make NN subclass assignments
obj.i <- LabelByNearestNeighbors(obj.i, "subclass", fraction = 0.25, n.neighbors = 100)
# Grab the metadata
curr.df <- data.frame(cell = colnames(obj.i)[obj.i$method == "Stereo-seq"],
subclass_nn = as.character(obj.i$subclass_nn[obj.i$method == "Stereo-seq"]))
print(table(curr.df$subclass_nn)["None"] / sum(table(curr.df$subclass_nn)))
df <- rbind(df, curr.df)
}
