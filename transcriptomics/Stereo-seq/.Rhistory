library(Seurat)
library(SeuratDisk)
library(reticulate)
library(scrubletR)
library(ggplot2)
library(patchwork)
library(dplyr)
library(data.table)
library(clustree)
library(reshape2)
library(tidyr)
library(gridExtra)
library(stringr)
library(plyr)
source("C:/Ryan/GitHub/trachtenberg-lab/transcriptomics/tools/seurat_functions.R")
source("C:/Ryan/GitHub/trachtenberg-lab/transcriptomics/tools/seurat_integration_functions.R")
source("C:/Ryan/GitHub/trachtenberg-lab/transcriptomics/xgboost/xgboost_train.R")
source("C:/Ryan/GitHub/trachtenberg-lab/transcriptomics/xgboost/plottingFxns.R")
colors_list <- GetColors()
obj.glutamatergic <- readRDS("E:/Transcriptomics_V1/Mouse/seurat/opossum_v1_glutamatergic_processed.rds")
library(Seurat)
library(SeuratDisk)
library(reticulate)
library(scrubletR)
library(ggplot2)
library(patchwork)
library(dplyr)
library(data.table)
library(clustree)
library(reshape2)
library(tidyr)
library(gridExtra)
library(stringr)
library(plyr)
source("C:/Ryan/GitHub/trachtenberg-lab/transcriptomics/tools/seurat_functions.R")
source("C:/Ryan/GitHub/trachtenberg-lab/transcriptomics/tools/seurat_integration_functions.R")
source("C:/Ryan/GitHub/trachtenberg-lab/transcriptomics/xgboost/xgboost_train.R")
source("C:/Ryan/GitHub/trachtenberg-lab/transcriptomics/xgboost/plottingFxns.R")
colors_list <- GetColors()
obj.glutamatergic <- readRDS("E:/Transcriptomics_V1/Opossum/seurat/opossum_v1_glutamatergic_processed.rds")
obj.glutamatergic$class <- "glutamatergic"
obj.gabaergic <- readRDS("E:/Transcriptomics_V1/Opossum/seurat/opossum_v1_gabaergic_processed.rds")
obj.gabaergic$class <- "gabaergic"
obj.nonneuronal <- readRDS("E:/Transcriptomics_V1/Opossum/seurat/opossum_v1_nonneuronal_processed.rds")
obj <- merge(obj.glutamatergic, y = c(obj.gabaergic, obj.nonneuronal))
obj.ctx <- readRDS("E:/STOmics/seurat/Opossum/opossum_stereoseq_ctx_COLS_EXT.rds") # _nofilt
obj$method <- "snRNA-seq"
obj.ctx$method <- "Stereo-seq"
obj.i <- IntegrateObjects(obj, obj.ctx, resolutions = c(0.5), subsample = FALSE)
obj.i <- LabelByNearestNeighbors(obj.i, "class", fraction = 0.05, n.neighbors = 500)
DimPlot(obj.i, group.by = "class_nn", label = TRUE) + NoLegend() + xlim(-12, 12) + ylim(-12, 12) + coord_equal()
obj.ctx.rd1 <- obj.i[, obj.i$class_nn %in% c("glutamatergic", "gabaergic", "nonneuronal")]
obj.ctx <- obj.i[, obj.i$class_nn %in% c("None")]
obj.i <- IntegrateObjects(obj, obj.ctx, resolutions = c(0.5), subsample = FALSE)
obj.i <- LabelByNearestNeighbors(obj.i, "class", fraction = 0.05, n.neighbors = 500)
DimPlot(obj.i, group.by = "class_nn", label = TRUE) + NoLegend() + xlim(-12, 12) + ylim(-12, 12) + coord_equal()
obj.ctx.rd2 <- obj.i[, obj.i$class_nn %in% c("glutamatergic", "gabaergic", "nonneuronal")]
obj.ctx.rd1.glutamatergic <- obj.ctx.rd1[, obj.ctx.rd1$class_nn == "glutamatergic"]
obj.ctx.rd1.glutamatergic <- IntegrateObjects(obj.glutamatergic, obj.ctx.rd1.glutamatergic, resolutions = c(0.5), subsample = FALSE)
obj.ctx.rd1.glutamatergic <- LabelByNearestNeighbors(obj.ctx.rd1.glutamatergic, "subclass", fraction = 0.25, n.neighbors = 250)
obj.ctx.rd1.gabaergic <- obj.ctx.rd1[, obj.ctx.rd1$class_nn == "gabaergic"]
obj.ctx.rd1.gabaergic <- IntegrateObjects(obj.gabaergic, obj.ctx.rd1.gabaergic, resolutions = c(0.5), subsample = FALSE)
obj.ctx.rd1.gabaergic <- LabelByNearestNeighbors(obj.ctx.rd1.gabaergic, "subclass", fraction = 0.25, n.neighbors = 150)
obj.ctx.rd1.nonneuronal <- obj.ctx.rd1[, obj.ctx.rd1$class_nn == "nonneuronal"]
obj.ctx.rd1.nonneuronal <- IntegrateObjects(obj.nonneuronal, obj.ctx.rd1.nonneuronal, resolutions = c(0.5), subsample = FALSE)
obj.ctx.rd1.nonneuronal <- LabelByNearestNeighbors(obj.ctx.rd1.nonneuronal, "subclass", fraction = 0.25, n.neighbors = 250)
DimPlot(obj.ctx.rd1.glutamatergic, group.by = "subclass_nn", label = TRUE) + NoLegend() + xlim(-12, 12) + ylim(-12, 12) + coord_equal()
DimPlot(obj.ctx.rd1.gabaergic, group.by = "subclass_nn", label = TRUE) + NoLegend() + xlim(-12, 12) + ylim(-12, 12) + coord_equal()
DimPlot(obj.ctx.rd1.nonneuronal, group.by = "subclass_nn", label = TRUE) + NoLegend() + xlim(-12, 12) + ylim(-12, 12) + coord_equal()
obj.ctx.rd2.glutamatergic <- obj.ctx.rd2[, obj.ctx.rd2$class_nn == "glutamatergic"]
obj.ctx.rd2.glutamatergic <- IntegrateObjects(obj.glutamatergic, obj.ctx.rd2.glutamatergic, resolutions = c(0.5), subsample = FALSE)
obj.ctx.rd1 <- merge(obj.ctx.rd1.glutamatergic, y = c(obj.ctx.rd1.gabaergic, obj.ctx.rd1.nonneuronal))
# obj.ctx.rd2 <- merge(obj.ctx.rd2.glutamatergic, y = c(obj.ctx.rd2.gabaergic, obj.ctx.rd2.nonneuronal))
obj.ctx.all <- readRDS("E:/STOmics/seurat/Opossum/opossum_stereoseq_ctx_COLS_EXT.rds")
obj.ctx.all$subclass_nn <- NA
# Round 1
assigned_subclasses <- obj.ctx.rd1$subclass_nn[!is.na(obj.ctx.rd1$subclass_nn)]
cell_ids <- names(assigned_subclasses)
obj.ctx.all$subclass_nn[cell_ids] <- assigned_subclasses
# # Round 2
# assigned_subclasses <- obj.ctx.rd2$subclass_nn[!is.na(obj.ctx.rd2$subclass_nn)]
# cell_ids <- names(assigned_subclasses)
# obj.ctx.all$subclass_nn[cell_ids] <- assigned_subclasses
saveRDS(obj.ctx.all, "E:/STOmics/Opossum_obj_ctx_all_filt_ext.rds")
idx <- 8
subclasses <-  c("IT_A", "IT_B", "IT_C", "IT_D", "L5NP", "L5PT", "L6CT", "L6b")
colors <- hcl.colors(8, palette = "Dynamic")
obj.ctx.glutamatergic <- subset(obj.ctx.all, subclass_nn %in% subclasses[idx])
Idents(obj.ctx.glutamatergic) <- "subclass_nn"
levels(obj.ctx.glutamatergic) <- subclasses[idx]
ImageDimPlot(obj.ctx.glutamatergic, fov = "COL", size = 3, cols = colors[idx], axes = TRUE)
idx <- 1
subclasses <-  c("IT_A", "IT_B", "IT_C", "IT_D", "L5NP", "L5PT", "L6CT", "L6b")
colors <- hcl.colors(8, palette = "Dynamic")
obj.ctx.glutamatergic <- subset(obj.ctx.all, subclass_nn %in% subclasses[idx])
Idents(obj.ctx.glutamatergic) <- "subclass_nn"
levels(obj.ctx.glutamatergic) <- subclasses[idx]
ImageDimPlot(obj.ctx.glutamatergic, fov = "COL", size = 3, cols = colors[idx], axes = TRUE)
idx <- 2
subclasses <-  c("IT_A", "IT_B", "IT_C", "IT_D", "L5NP", "L5PT", "L6CT", "L6b")
colors <- hcl.colors(8, palette = "Dynamic")
obj.ctx.glutamatergic <- subset(obj.ctx.all, subclass_nn %in% subclasses[idx])
Idents(obj.ctx.glutamatergic) <- "subclass_nn"
levels(obj.ctx.glutamatergic) <- subclasses[idx]
ImageDimPlot(obj.ctx.glutamatergic, fov = "COL", size = 3, cols = colors[idx], axes = TRUE)
idx <- 3
subclasses <-  c("IT_A", "IT_B", "IT_C", "IT_D", "L5NP", "L5PT", "L6CT", "L6b")
colors <- hcl.colors(8, palette = "Dynamic")
obj.ctx.glutamatergic <- subset(obj.ctx.all, subclass_nn %in% subclasses[idx])
Idents(obj.ctx.glutamatergic) <- "subclass_nn"
levels(obj.ctx.glutamatergic) <- subclasses[idx]
ImageDimPlot(obj.ctx.glutamatergic, fov = "COL", size = 3, cols = colors[idx], axes = TRUE)
idx <- 4
subclasses <-  c("IT_A", "IT_B", "IT_C", "IT_D", "L5NP", "L5PT", "L6CT", "L6b")
colors <- hcl.colors(8, palette = "Dynamic")
obj.ctx.glutamatergic <- subset(obj.ctx.all, subclass_nn %in% subclasses[idx])
Idents(obj.ctx.glutamatergic) <- "subclass_nn"
levels(obj.ctx.glutamatergic) <- subclasses[idx]
ImageDimPlot(obj.ctx.glutamatergic, fov = "COL", size = 3, cols = colors[idx], axes = TRUE)
idx <- 5
subclasses <-  c("IT_A", "IT_B", "IT_C", "IT_D", "L5NP", "L5PT", "L6CT", "L6b")
colors <- hcl.colors(8, palette = "Dynamic")
obj.ctx.glutamatergic <- subset(obj.ctx.all, subclass_nn %in% subclasses[idx])
Idents(obj.ctx.glutamatergic) <- "subclass_nn"
levels(obj.ctx.glutamatergic) <- subclasses[idx]
ImageDimPlot(obj.ctx.glutamatergic, fov = "COL", size = 3, cols = colors[idx], axes = TRUE)
idx <- 6
subclasses <-  c("IT_A", "IT_B", "IT_C", "IT_D", "L5NP", "L5PT", "L6CT", "L6b")
colors <- hcl.colors(8, palette = "Dynamic")
obj.ctx.glutamatergic <- subset(obj.ctx.all, subclass_nn %in% subclasses[idx])
Idents(obj.ctx.glutamatergic) <- "subclass_nn"
levels(obj.ctx.glutamatergic) <- subclasses[idx]
ImageDimPlot(obj.ctx.glutamatergic, fov = "COL", size = 3, cols = colors[idx], axes = TRUE)
idx <- 7
subclasses <-  c("IT_A", "IT_B", "IT_C", "IT_D", "L5NP", "L5PT", "L6CT", "L6b")
colors <- hcl.colors(8, palette = "Dynamic")
obj.ctx.glutamatergic <- subset(obj.ctx.all, subclass_nn %in% subclasses[idx])
Idents(obj.ctx.glutamatergic) <- "subclass_nn"
levels(obj.ctx.glutamatergic) <- subclasses[idx]
ImageDimPlot(obj.ctx.glutamatergic, fov = "COL", size = 3, cols = colors[idx], axes = TRUE)
DimPlot(obj.i, group.by = "class_nn", label = TRUE) + NoLegend() + xlim(-20, 20) + ylim(-20, 20) + coord_equal()
idx <- 4
subclasses <-  c("IT_A", "IT_B", "IT_C", "IT_D", "L5NP", "L5PT", "L6CT", "L6b")
colors <- hcl.colors(8, palette = "Dynamic")
obj.ctx.glutamatergic <- subset(obj.ctx.all, subclass_nn %in% subclasses[idx])
Idents(obj.ctx.glutamatergic) <- "subclass_nn"
levels(obj.ctx.glutamatergic) <- subclasses[idx]
ImageDimPlot(obj.ctx.glutamatergic, fov = "COL", size = 3, cols = colors[idx], axes = TRUE)
obj.ctx.glutamatergic <- subset(obj.ctx.all, subclass_nn %in% c("IT_A", "IT_B", "IT_C", "IT_D", "L5NP", "L5PT", "L6CT", "L6b"))
Idents(obj.ctx.glutamatergic) <- "subclass_nn"
levels(obj.ctx.glutamatergic) <- c("IT_A", "IT_B", "IT_C", "IT_D", "L5NP", "L5PT", "L6CT", "L6b")
ImageDimPlot(obj.ctx.glutamatergic, fov = "COL", size = 3, cols = colors, axes = TRUE)
# ggsave("E:/Opossum_Paper/Figure 3/Mouse_Glutamatergic_Column.svg", plot = p, width = 7, height = 5)
# 2. Extract coordinates and subclass labels
coords <- GetTissueCoordinates(obj.ctx.glutamatergic)
df <- data.frame(
y = coords$x,
subclass = obj.ctx.glutamatergic$subclass_nn
)
# 3. Filter and set subclass as a factor to enforce order
df <- df %>%
filter(!is.na(subclass) & subclass != "None") %>%
mutate(subclass = factor(subclass, levels = c("IT_A", "IT_B", "IT_C", "IT_D", "L5NP", "L5PT", "L6CT", "L6b")))
# 4. Plot smooth density profiles
ggplot(df, aes(x = y, color = subclass)) +
geom_density(
size = 2,
# adjust = 0.2         # Smoothing factor (increase if you want smoother lines)
) +
scale_color_manual(values = colors) +
scale_fill_manual(values = colors) +
theme_minimal() +
theme(
legend.title = element_blank(),
aspect.ratio = 1
) + coord_flip() + ylim(0, 0.003)
# ggsave("E:/Opossum_Paper/Figure 3/Mouse_Glutamatergic_Density.svg", plot = p)
# # Outlined histograms without bin borders
# p <- ggplot(df, aes(x = y, color = subclass)) +
#   stat_bin(
#     geom = "step",
#     bins = 30,
#     size = 1  # Adjust line thickness
#   ) +
#   scale_color_manual(values = colors) +
#   theme_minimal() +
#   theme(
#     legend.title = element_blank(),
#     aspect.ratio = 1
#   ) + coord_flip()
# ggsave("E:/Opossum_Paper/Figure 3/Mouse_Glutamatergic_Histogram.svg", plot = p)
obj.glutamatergic
obj.glutamatergic$SCT_snn_res.0.2
colors <- hcl.colors(8, palette = "Dynamic")
colors[2] <- "#424242"
obj.ctx.glutamatergic <- subset(obj.ctx.all, subclass_nn %in% c("IT_A", "IT_B", "IT_C", "IT_D", "L5NP", "L5PT", "L6CT", "L6b"))
Idents(obj.ctx.glutamatergic) <- "subclass_nn"
levels(obj.ctx.glutamatergic) <- c("IT_A", "IT_B", "IT_C", "IT_D", "L5NP", "L5PT", "L6CT", "L6b")
ImageDimPlot(obj.ctx.glutamatergic, fov = "COL", size = 3, cols = colors, axes = TRUE)
# ggsave("E:/Opossum_Paper/Figure 3/Mouse_Glutamatergic_Column.svg", plot = p, width = 7, height = 5)
obj.ctx.all <- readRDS("E:/STOmics/Mouse_obj_ctx_all_filt_ext.rds")
colors <- hcl.colors(8, palette = "Dynamic")
colors[2] <- "#424242"
obj.ctx.glutamatergic <- subset(obj.ctx.all, subclass_nn %in% c("L2/3", "L4", "L5IT", "L6IT", "L5NP", "L5PT", "L6CT", "L6b"))
Idents(obj.ctx.glutamatergic) <- "subclass_nn"
levels(obj.ctx.glutamatergic) <- c("L2/3", "L4", "L5IT", "L5NP", "L5PT", "L6IT", "L6CT", "L6b")
ImageDimPlot(obj.ctx.glutamatergic, fov = "COL", size = 3, cols = colors, axes = TRUE)
# ggsave("E:/Opossum_Paper/Figure 3/Mouse_Glutamatergic_Column.svg", plot = p, width = 7, height = 5)
# 2. Extract coordinates and subclass labels
coords <- GetTissueCoordinates(obj.ctx.glutamatergic)
df <- data.frame(
y = coords$x,
subclass = obj.ctx.glutamatergic$subclass_nn
)
# 3. Filter and set subclass as a factor to enforce order
df <- df %>%
filter(!is.na(subclass) & subclass != "None") %>%
mutate(subclass = factor(subclass, levels = c("L2/3", "L4", "L5IT", "L5NP", "L5PT", "L6IT", "L6CT", "L6b")))
# 4. Plot smooth density profiles
ggplot(df, aes(x = y, color = subclass)) +
geom_density(
size = 2,
# adjust = 0.2         # Smoothing factor (increase if you want smoother lines)
) +
scale_color_manual(values = colors) +
scale_fill_manual(values = colors) +
theme_minimal() +
theme(
legend.title = element_blank(),
aspect.ratio = 1
) + coord_flip() + ylim(0, 0.003)
# ggsave("E:/Opossum_Paper/Figure 3/Mouse_Glutamatergic_Density.svg", plot = p)
# # Outlined histograms without bin borders
# p <- ggplot(df, aes(x = y, color = subclass)) +
#   stat_bin(
#     geom = "step",
#     bins = 30,
#     size = 1  # Adjust line thickness
#   ) +
#   scale_color_manual(values = colors) +
#   theme_minimal() +
#   theme(
#     legend.title = element_blank(),
#     aspect.ratio = 1
#   ) + coord_flip()
# ggsave("E:/Opossum_Paper/Figure 3/Mouse_Glutamatergic_Histogram.svg", plot = p)
obj.ctx.glutamatergic <- subset(obj.ctx.all, subclass_nn %in% c("L2/3", "L4", "L5IT", "L6IT", "L5NP", "L5PT", "L6CT", "L6b"))
Idents(obj.ctx.glutamatergic) <- "subclass_nn"
levels(obj.ctx.glutamatergic) <- c("L2/3", "L4", "L5IT", "L5NP", "L5PT", "L6IT", "L6CT", "L6b")
ImageDimPlot(obj.ctx.glutamatergic, fov = "COL", size = 3, cols = colors, axes = TRUE)
ggsave("E:/Opossum_Paper/Figure 3/Mouse_Glutamatergic_Column_UPD.svg", plot = p, width = 7, height = 5)
obj.ctx.glutamatergic <- subset(obj.ctx.all, subclass_nn %in% c("L2/3", "L4", "L5IT", "L6IT", "L5NP", "L5PT", "L6CT", "L6b"))
Idents(obj.ctx.glutamatergic) <- "subclass_nn"
levels(obj.ctx.glutamatergic) <- c("L2/3", "L4", "L5IT", "L5NP", "L5PT", "L6IT", "L6CT", "L6b")
p <- ImageDimPlot(obj.ctx.glutamatergic, fov = "COL", size = 3, cols = colors, axes = TRUE)
ggsave("E:/Opossum_Paper/Figure 3/Mouse_Glutamatergic_Column_UPD.svg", plot = p, width = 7, height = 5)
# 2. Extract coordinates and subclass labels
coords <- GetTissueCoordinates(obj.ctx.glutamatergic)
df <- data.frame(
y = coords$x,
subclass = obj.ctx.glutamatergic$subclass_nn
)
# 3. Filter and set subclass as a factor to enforce order
df <- df %>%
filter(!is.na(subclass) & subclass != "None") %>%
mutate(subclass = factor(subclass, levels = c("L2/3", "L4", "L5IT", "L5NP", "L5PT", "L6IT", "L6CT", "L6b")))
# 4. Plot smooth density profiles
p <- ggplot(df, aes(x = y, color = subclass)) +
geom_density(
size = 2,
# adjust = 0.2         # Smoothing factor (increase if you want smoother lines)
) +
scale_color_manual(values = colors) +
scale_fill_manual(values = colors) +
theme_minimal() +
theme(
legend.title = element_blank(),
aspect.ratio = 1
) + coord_flip() + ylim(0, 0.003)
# ggsave("E:/Opossum_Paper/Figure 3/Mouse_Glutamatergic_Density.svg", plot = p)
# # Outlined histograms without bin borders
# p <- ggplot(df, aes(x = y, color = subclass)) +
#   stat_bin(
#     geom = "step",
#     bins = 30,
#     size = 1  # Adjust line thickness
#   ) +
#   scale_color_manual(values = colors) +
#   theme_minimal() +
#   theme(
#     legend.title = element_blank(),
#     aspect.ratio = 1
#   ) + coord_flip()
ggsave("E:/Opossum_Paper/Figure 3/Mouse_Glutamatergic_Histogram.svg", plot = p)
obj.ctx.glutamatergic <- subset(obj.ctx.all, subclass_nn %in% c("IT_A", "IT_B", "IT_C", "IT_D", "L5NP", "L5PT", "L6CT", "L6b"))
Idents(obj.ctx.glutamatergic) <- "subclass_nn"
levels(obj.ctx.glutamatergic) <- c("IT_A", "IT_B", "IT_C", "IT_D", "L5NP", "L5PT", "L6CT", "L6b")
p <- ImageDimPlot(obj.ctx.glutamatergic, fov = "COL", size = 3, cols = colors, axes = TRUE)
ggsave("E:/Opossum_Paper/Figure 3/Opossum_Glutamatergic_Column_UPD.svg", plot = p, width = 7, height = 5)
# 2. Extract coordinates and subclass labels
coords <- GetTissueCoordinates(obj.ctx.glutamatergic)
df <- data.frame(
y = coords$x,
subclass = obj.ctx.glutamatergic$subclass_nn
)
# 3. Filter and set subclass as a factor to enforce order
df <- df %>%
filter(!is.na(subclass) & subclass != "None") %>%
mutate(subclass = factor(subclass, levels = c("IT_A", "IT_B", "IT_C", "IT_D", "L5NP", "L5PT", "L6CT", "L6b")))
# 4. Plot smooth density profiles
p <- ggplot(df, aes(x = y, color = subclass)) +
geom_density(
size = 2,
# adjust = 0.2         # Smoothing factor (increase if you want smoother lines)
) +
scale_color_manual(values = colors) +
scale_fill_manual(values = colors) +
theme_minimal() +
theme(
legend.title = element_blank(),
aspect.ratio = 1
) + coord_flip() + ylim(0, 0.003)
# ggsave("E:/Opossum_Paper/Figure 3/Mouse_Glutamatergic_Density.svg", plot = p)
# # Outlined histograms without bin borders
# p <- ggplot(df, aes(x = y, color = subclass)) +
#   stat_bin(
#     geom = "step",
#     bins = 30,
#     size = 1  # Adjust line thickness
#   ) +
#   scale_color_manual(values = colors) +
#   theme_minimal() +
#   theme(
#     legend.title = element_blank(),
#     aspect.ratio = 1
#   ) + coord_flip()
ggsave("E:/Opossum_Paper/Figure 3/Opossum_Glutamatergic_Histogram_UPD.svg", plot = p)
obj.ctx.all <- readRDS("E:/STOmics/Opossum_obj_ctx_all_filt_ext.rds")
obj.ctx.glutamatergic <- subset(obj.ctx.all, subclass_nn %in% c("IT_A", "IT_B", "IT_C", "IT_D", "L5NP", "L5PT", "L6CT", "L6b"))
Idents(obj.ctx.glutamatergic) <- "subclass_nn"
levels(obj.ctx.glutamatergic) <- c("IT_A", "IT_B", "IT_C", "IT_D", "L5NP", "L5PT", "L6CT", "L6b")
p <- ImageDimPlot(obj.ctx.glutamatergic, fov = "COL", size = 3, cols = colors, axes = TRUE)
ggsave("E:/Opossum_Paper/Figure 3/Opossum_Glutamatergic_Column_UPD.svg", plot = p, width = 7, height = 5)
# 2. Extract coordinates and subclass labels
coords <- GetTissueCoordinates(obj.ctx.glutamatergic)
df <- data.frame(
y = coords$x,
subclass = obj.ctx.glutamatergic$subclass_nn
)
# 3. Filter and set subclass as a factor to enforce order
df <- df %>%
filter(!is.na(subclass) & subclass != "None") %>%
mutate(subclass = factor(subclass, levels = c("IT_A", "IT_B", "IT_C", "IT_D", "L5NP", "L5PT", "L6CT", "L6b")))
# 4. Plot smooth density profiles
p <- ggplot(df, aes(x = y, color = subclass)) +
geom_density(
size = 2,
# adjust = 0.2         # Smoothing factor (increase if you want smoother lines)
) +
scale_color_manual(values = colors) +
scale_fill_manual(values = colors) +
theme_minimal() +
theme(
legend.title = element_blank(),
aspect.ratio = 1
) + coord_flip() + ylim(0, 0.003)
# ggsave("E:/Opossum_Paper/Figure 3/Mouse_Glutamatergic_Density.svg", plot = p)
# # Outlined histograms without bin borders
# p <- ggplot(df, aes(x = y, color = subclass)) +
#   stat_bin(
#     geom = "step",
#     bins = 30,
#     size = 1  # Adjust line thickness
#   ) +
#   scale_color_manual(values = colors) +
#   theme_minimal() +
#   theme(
#     legend.title = element_blank(),
#     aspect.ratio = 1
#   ) + coord_flip()
ggsave("E:/Opossum_Paper/Figure 3/Opossum_Glutamatergic_Histogram_UPD.svg", plot = p)
idx <- 4
subclasses <-  c("IT_A", "IT_B", "IT_C", "IT_D", "L5NP", "L5PT", "L6CT", "L6b")
colors <- hcl.colors(8, palette = "Dynamic")
obj.ctx.glutamatergic <- subset(obj.ctx.all, subclass_nn %in% subclasses[idx])
Idents(obj.ctx.glutamatergic) <- "subclass_nn"
levels(obj.ctx.glutamatergic) <- subclasses[idx]
ImageDimPlot(obj.ctx.glutamatergic, fov = "COL", size = 3, cols = colors[idx], axes = TRUE)
idx <- 5
subclasses <-  c("IT_A", "IT_B", "IT_C", "IT_D", "L5NP", "L5PT", "L6CT", "L6b")
colors <- hcl.colors(8, palette = "Dynamic")
obj.ctx.glutamatergic <- subset(obj.ctx.all, subclass_nn %in% subclasses[idx])
Idents(obj.ctx.glutamatergic) <- "subclass_nn"
levels(obj.ctx.glutamatergic) <- subclasses[idx]
ImageDimPlot(obj.ctx.glutamatergic, fov = "COL", size = 3, cols = colors[idx], axes = TRUE)
gc()
library(Seurat)
library(SeuratObject)
source("C:/Ryan/GitHub/trachtenberg-lab/transcriptomics/tools/seurat_functions.R")
source("C:/Ryan/GitHub/trachtenberg-lab/transcriptomics/tools/seurat_integration_functions.R")
data.path <- "E:/STOmics/seurat/Opossum/raw/"
obj.data <- Read10X(data.path, gene.column = 1)
obj <- CreateSeuratObject(counts = obj.data, project = "Opossum_V1_Stereo-seq")
mapping_path <- "E:/_genomes/Opossum_Mouse_Genes.txt"
obj <- MapGenes(obj, mapping_path, use_ids = TRUE)
obj$species <- "Opossum"
X <- read.csv(paste(data.path, "x_coords.csv", sep = ""), header = FALSE) * -1
obj <- AddMetaData(obj, X$V1, "X")
Y <- read.csv(paste(data.path, "y_coords.csv", sep = ""), header = FALSE) * -1
obj <- AddMetaData(obj, Y$V1, "Y")
crops <- list(theta = c(-5, -7, -38),
x1 = c(-9500, -7000, -125),
x2 = c(-7500, -5000, 1045),
y1 = c(-14300, -14600, -5650),
y2 = c(-12800, -13050, -7000))
# Define the rotation angle in degrees
rotation_angle <- -38  # Rotate by 30 degrees
theta <- rotation_angle * pi / 180  # Convert to radians
# Get current coordinates
coords <- as.matrix(obj@meta.data[, c("X", "Y")])
# Define rotation matrix
rotation_matrix <- matrix(
c(cos(theta), -sin(theta),
sin(theta),  cos(theta)),
nrow = 2
)
# Apply rotation
rotated_coords <- coords %*% rotation_matrix
# Update metadata
obj$X_rotated <- rotated_coords[, 1]
obj$Y_rotated <- rotated_coords[, 2]
cents.df <- data.frame(X, Y)
colnames(cents.df) <- c("X", "Y")
rownames(cents.df) <- colnames(obj)
cents.df$X <- obj$X_rotated
cents.df$Y <- obj$Y_rotated
cents <- CreateCentroids(cents.df)
fov <- CreateFOV(
cents,
type = "centroids",
assay = "RNA",
key = Key("FOV", quiet = TRUE)
)
fov <- fov[Cells(obj)]
obj[["FOV"]] <- fov
x1 <- -125
x2 <- 1045
y1 <- -5650
y2 <- -7000
extension <- (y2 - y1) * 0.1
column.coords <- Crop(obj[["FOV"]], x = c(x1, x2), y = c(y1 - extension, y2), coords = "plot")
obj[["COL3"]] <- column.coords
ImageDimPlot(obj, fov = "COL3", cols = "red", size = 3)
# ImageFeaturePlot(obj, "nCount_RNA", max.cutoff = 1000)
# ImageFeaturePlot(obj, "", max.cutoff = 10, axes = TRUE)
obj.ctx <- subset(obj, cells = Cells(obj[["COL3"]]))
saveRDS(obj.ctx, "E:/STOmics/seurat/Opossum/opossum_stereoseq_ctx_COL3_EXTEXT.rds")
crops <- list(theta = c(-5, -7, -38),
x1 = c(-9500, -7000, -125),
x2 = c(-7500, -5000, 1045),
y1 = c(-14300, -14600, -5650),
y2 = c(-12800, -13050, -7000))
# Define the rotation angle in degrees
rotation_angle <- -7  # Rotate by 30 degrees
theta <- rotation_angle * pi / 180  # Convert to radians
# Get current coordinates
coords <- as.matrix(obj@meta.data[, c("X", "Y")])
# Define rotation matrix
rotation_matrix <- matrix(
c(cos(theta), -sin(theta),
sin(theta),  cos(theta)),
nrow = 2
)
# Apply rotation
rotated_coords <- coords %*% rotation_matrix
# Update metadata
obj$X_rotated <- rotated_coords[, 1]
obj$Y_rotated <- rotated_coords[, 2]
cents.df <- data.frame(X, Y)
colnames(cents.df) <- c("X", "Y")
rownames(cents.df) <- colnames(obj)
cents.df$X <- obj$X_rotated
cents.df$Y <- obj$Y_rotated
cents <- CreateCentroids(cents.df)
fov <- CreateFOV(
cents,
type = "centroids",
assay = "RNA",
key = Key("FOV", quiet = TRUE)
)
fov <- fov[Cells(obj)]
obj[["FOV"]] <- fov
x1 <- -7000
x2 <- -5000
y1 <- -14600
y2 <- -13050
extension <- (y2 - y1) * 0.1
column.coords <- Crop(obj[["FOV"]], x = c(x1, x2), y = c(y1 - extension, y2), coords = "plot")
obj[["COL2"]] <- column.coords
ImageDimPlot(obj, fov = "COL2", cols = "red", size = 3)
# ImageFeaturePlot(obj, "nCount_RNA", max.cutoff = 1000)
# ImageFeaturePlot(obj, "", max.cutoff = 10, axes = TRUE)
obj.ctx <- subset(obj, cells = Cells(obj[["COL2"]]))
library(Seurat)
library(SeuratObject)
source("C:/Ryan/GitHub/trachtenberg-lab/transcriptomics/tools/seurat_functions.R")
source("C:/Ryan/GitHub/trachtenberg-lab/transcriptomics/tools/seurat_integration_functions.R")
data.path <- "E:/STOmics/seurat/Opossum/raw/"
obj.data <- Read10X(data.path, gene.column = 1)
obj <- CreateSeuratObject(counts = obj.data, project = "Opossum_V1_Stereo-seq")
mapping_path <- "E:/_genomes/Opossum_Mouse_Genes.txt"
obj <- MapGenes(obj, mapping_path, use_ids = TRUE)
